# iOS workflow for master branch using iOS Simulator
# This provides comprehensive testing for production releases

name: iOS Master Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test Thrive Church Official App using iOS Simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: |
          sudo gem install cocoapods
          pod install

      - name: Set Default Scheme
        run: |
          # For workspace projects, we need to specify the scheme explicitly
          scheme="Thrive Church Official App"
          echo $scheme | cat >default
          echo Using scheme: $scheme

      - name: Build for Testing
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # Get available iPhone simulator
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          # Use workspace since we have CocoaPods
          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Building with device: $device"
          echo "Using scheme: $scheme"
          echo "Using workspace: $file_to_build"

          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            CODE_SIGNING_ALLOWED=NO

      - name: Run Unit Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running unit tests on device: $device"

          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -only-testing:"Thrive Church Official AppTests" \
            CODE_SIGNING_ALLOWED=NO

      - name: Run UI Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running UI tests on device: $device"

          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -only-testing:"Thrive Church Official AppUITests" \
            CODE_SIGNING_ALLOWED=NO
        continue-on-error: true  # UI tests may have known issues

      - name: Test on iPad
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # Get iPad device for additional testing
          ipad_device=`xcrun simctl list devices available | grep iPad | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running tests on iPad: $ipad_device"

          # Build for iPad testing
          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$ipad_device" \
            CODE_SIGNING_ALLOWED=NO

          # Run unit tests on iPad
          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$ipad_device" \
            -only-testing:"Thrive Church Official AppTests" \
            CODE_SIGNING_ALLOWED=NO
        continue-on-error: true  # Allow iPad tests to fail without breaking the build

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-master
          path: |
            *.xcresult
            DerivedData/Logs/Test/*.xcresult
