# iOS workflow for master branch using iOS Simulator
# This provides comprehensive testing for production releases

name: iOS Master Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test Thrive Church Official App using iOS Simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CocoaPods dependencies
        run: |
          sudo gem install cocoapods
          # Clean any existing pods to avoid path issues
          rm -rf Pods
          # Reinstall with clean state for CI
          pod install --repo-update

      - name: Fix CocoaPods XCFrameworks paths for CI
        run: |
          echo "Creating missing xcfilelist files for CI..."

          # The build system is looking for files in the project root, not in Pods/
          # Create the Target Support Files directories in the expected location
          mkdir -p "Target Support Files/FirebaseAnalytics"
          mkdir -p "Target Support Files/GoogleAppMeasurement"

          # Create empty xcfilelist files where the build system expects them
          touch "Target Support Files/FirebaseAnalytics/FirebaseAnalytics-xcframeworks-input-files.xcfilelist"
          touch "Target Support Files/FirebaseAnalytics/FirebaseAnalytics-xcframeworks-output-files.xcfilelist"
          touch "Target Support Files/GoogleAppMeasurement/GoogleAppMeasurement-xcframeworks-input-files.xcfilelist"
          touch "Target Support Files/GoogleAppMeasurement/GoogleAppMeasurement-xcframeworks-output-files.xcfilelist"

          # Also create them in the Pods directory as backup
          mkdir -p "Pods/Target Support Files/FirebaseAnalytics"
          mkdir -p "Pods/Target Support Files/GoogleAppMeasurement"
          touch "Pods/Target Support Files/FirebaseAnalytics/FirebaseAnalytics-xcframeworks-input-files.xcfilelist"
          touch "Pods/Target Support Files/FirebaseAnalytics/FirebaseAnalytics-xcframeworks-output-files.xcfilelist"
          touch "Pods/Target Support Files/GoogleAppMeasurement/GoogleAppMeasurement-xcframeworks-input-files.xcfilelist"
          touch "Pods/Target Support Files/GoogleAppMeasurement/GoogleAppMeasurement-xcframeworks-output-files.xcfilelist"

          echo "✅ Created missing xcfilelist files in both locations"
          echo "Verifying files exist in project root:"
          ls -la "Target Support Files/FirebaseAnalytics/" || echo "Directory not found"
          ls -la "Target Support Files/GoogleAppMeasurement/" || echo "Directory not found"
          echo "Verifying files exist in Pods:"
          ls -la "Pods/Target Support Files/FirebaseAnalytics/" || echo "Directory not found"
          ls -la "Pods/Target Support Files/GoogleAppMeasurement/" || echo "Directory not found"

      - name: Create dummy plist files for CI
        run: |
          echo "Creating minimal dummy plist files for CI..."
          printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>API_URL</key>\n<string>https://api.example.com</string>\n</dict>\n</plist>\n' > Config.plist
          printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>BUNDLE_ID</key>\n<string>com.thrive-fl.ThriveCommunityChurch</string>\n<key>PROJECT_ID</key>\n<string>dummy-project</string>\n<key>GOOGLE_APP_ID</key>\n<string>1:123456789:ios:dummy</string>\n</dict>\n</plist>\n' > GoogleService-Info.plist
          echo "✅ Dummy plist files created"
          ls -la Config.plist GoogleService-Info.plist



      - name: Set Default Scheme
        run: |
          # For workspace projects, we need to specify the scheme explicitly
          scheme="Thrive Church Official App"
          echo $scheme | cat >default
          echo Using scheme: $scheme

      - name: Build for Testing
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # Get available iPhone simulator
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          # Use workspace since we have CocoaPods
          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Building with device: $device"
          echo "Using scheme: $scheme"
          echo "Using workspace: $file_to_build"

          export SRCROOT="$(pwd)"
          echo "SRCROOT set to: $SRCROOT"

          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            CODE_SIGNING_ALLOWED=NO \
            SRCROOT="$SRCROOT"

      - name: Run Unit Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running unit tests on device: $device"

          export SRCROOT="$(pwd)"

          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -only-testing:"Thrive Church Official AppTests" \
            CODE_SIGNING_ALLOWED=NO \
            SRCROOT="$SRCROOT"

      - name: Run UI Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun simctl list devices available | grep iPhone | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running UI tests on device: $device"

          export SRCROOT="$(pwd)"

          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -only-testing:"Thrive Church Official AppUITests" \
            CODE_SIGNING_ALLOWED=NO \
            SRCROOT="$SRCROOT"
        continue-on-error: true  # UI tests may have known issues

      - name: Test on iPad
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # Get iPad device for additional testing
          ipad_device=`xcrun simctl list devices available | grep iPad | head -1 | sed 's/^[[:space:]]*//' | sed 's/ ([A-F0-9-]*) .*$//'`
          if [ $scheme = default ]; then scheme=$(cat default); fi

          filetype_parameter="workspace"
          file_to_build="Thrive Church Official App.xcworkspace"

          echo "Running tests on iPad: $ipad_device"

          export SRCROOT="$(pwd)"

          # Build for iPad testing
          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$ipad_device" \
            CODE_SIGNING_ALLOWED=NO \
            SRCROOT="$SRCROOT"

          # Run unit tests on iPad
          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$ipad_device" \
            -only-testing:"Thrive Church Official AppTests" \
            CODE_SIGNING_ALLOWED=NO \
            SRCROOT="$SRCROOT"
        continue-on-error: true  # Allow iPad tests to fail without breaking the build

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-master
          path: |
            *.xcresult
            DerivedData/Logs/Test/*.xcresult
